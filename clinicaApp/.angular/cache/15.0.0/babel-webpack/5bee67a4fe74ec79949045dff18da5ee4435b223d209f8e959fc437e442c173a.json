{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DoctorsComponent = class DoctorsComponent {\n  constructor(router, doctorService, professionService) {\n    this.router = router;\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n    this.doctors = [];\n    this.doctors2 = [];\n    this.selected = \"\";\n    this.oneDoctor = {\n      id: 1,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\",\n      imageUrl: \"\",\n      doctorCode: \"\",\n      professions: []\n    };\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n  }\n  ngOnInit() {\n    this.getOneDoctor();\n    this.getDoctors();\n    console.log(this.doctors2);\n    this.getAllProfessions();\n  }\n  clickOnSeeMoreButton(doctor) {\n    this.oneDoctor = doctor;\n  }\n  clickOnSearchButton() {\n    this.doctors = [];\n    //if(this.doctors2 != undefined)\n    this.doctors2?.forEach(val => this.doctors.push(Object.assign({}, val)));\n    var n = this.doctors?.length;\n    if (this.doctors != undefined && n != undefined) {\n      for (var i = 0; i < n; i++) {\n        let doc = this.doctors.shift();\n        if (doc != undefined) {\n          for (let prof of doc.professions) {\n            if (this.selected == prof.name) {\n              this.doctors?.push(doc);\n            }\n          }\n        }\n      }\n      console.log(this.doctors?.length);\n    } else console.log(\"error\");\n  }\n  getDoctors() {\n    this.doctorService.getDoctors().subscribe(response => {\n      this.doctors = response;\n      this.doctors2 = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n  getAllProfessions() {\n    this.professionService.getProfession().subscribe(response => {\n      this.professions = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n  getOneDoctor() {\n    this.doctorService.getDoctorById(1).subscribe(response => {\n      this.oneDoctor = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n};\nDoctorsComponent = __decorate([Component({\n  selector: 'app-doctors',\n  templateUrl: './doctors.component.html',\n  styleUrls: ['./doctors.component.css']\n})], DoctorsComponent);\nexport { DoctorsComponent };","map":{"version":3,"mappings":"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","names":["Component","DoctorsComponent","constructor","router","doctorService","professionService","id","firstName","lastName","email","phone","password","imageUrl","doctorCode","professions","ngOnInit","getOneDoctor","getDoctors","console","log","doctors2","getAllProfessions","clickOnSeeMoreButton","doctor","oneDoctor","clickOnSearchButton","doctors","forEach","val","push","Object","assign","n","length","undefined","i","doc","shift","prof","selected","name","subscribe","response","error","alert","message","getProfession","getDoctorById","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\AN_3\\IS\\Clinica\\clinicaApp\\src\\app\\components\\doctors\\doctors.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {Doctor} from \"../services/doctor\";\nimport {DoctorService} from \"../services/doctor.service\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {ProfessionService} from \"../services/profession.service\";\nimport {Profession} from \"../services/profession\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-doctors',\n  templateUrl: './doctors.component.html',\n  styleUrls: ['./doctors.component.css']\n})\nexport class DoctorsComponent implements OnInit{\n\n  public doctors: Doctor[] = [];\n  public doctors2: Doctor[] = [];\n  public professions: Profession[] | undefined;\n\n  public newDoctorsList: Array<Doctor> | undefined;\n  public selected: string = \"\";\n  public oneDoctor: Doctor = {\n    id: 1,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    imageUrl: \"\",\n    doctorCode: \"\",\n    professions: []\n  };\n\n  constructor(private router: Router,\n              private doctorService: DoctorService,\n              private professionService: ProfessionService){\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n  }\n\n  ngOnInit(){\n    this.getOneDoctor();\n    this.getDoctors();\n    console.log(this.doctors2);\n    this.getAllProfessions();\n  }\n  public clickOnSeeMoreButton(doctor: Doctor): void{\n    this.oneDoctor = doctor;\n  }\n  public clickOnSearchButton():void {\n    this.doctors = [];\n    //if(this.doctors2 != undefined)\n    this.doctors2?.forEach(val => this.doctors.push(Object.assign({}, val)));\n    var n = this.doctors?.length;\n    if(this.doctors != undefined && n!= undefined) {\n      for(var i = 0; i < n; i++){\n        let doc = this.doctors.shift();\n        if(doc != undefined) {\n          for (let prof of doc.professions) {\n            if (this.selected == prof.name) {\n              this.doctors?.push(doc);\n            }\n          }\n        }\n      }\n      console.log(this.doctors?.length);\n    }\n    else\n      console.log(\"error\");\n  }\n\n  public getDoctors(): void {\n    this.doctorService.getDoctors().subscribe(\n      (response: Doctor[]) => {\n        this.doctors = response;\n        this.doctors2 = response;\n        },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n      )\n  }\n\n  public getAllProfessions(): void {\n    this.professionService.getProfession().subscribe(\n      (response: Profession[]) => {\n        this.professions = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n\n  public getOneDoctor(): void {\n    this.doctorService.getDoctorById(1).subscribe(\n      (response: Doctor) => {\n        this.oneDoctor = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}