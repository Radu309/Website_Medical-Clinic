{"ast":null,"code":"import _asyncToGenerator from \"C:/AN_3/IS/Clinica/clinicaApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { promises as fsPromises } from 'fs';\nimport { join } from 'path';\nlet DoctorsComponent = class DoctorsComponent {\n  constructor(router, doctorService, professionService, requirementService) {\n    this.router = router;\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n    this.requirementService = requirementService;\n    this.doctors = [];\n    this.doctors2 = [];\n    this.professions = [];\n    this.requirements = [];\n    this.newRequirements = [];\n    this.totalCost = 0;\n    this.selectForSearch = \"\";\n    this.selectProfession = \"\";\n    this.selectRequirement = \"\";\n    this.receiptFile = \"Receipt\";\n    this.oneDoctor = {\n      id: 0,\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      password: \"\",\n      imageUrl: \"\",\n      doctorCode: \"\",\n      professions: [],\n      appointmentsDoctor: []\n    };\n    this.oneProfession = {\n      id: 0,\n      name: \"\",\n      requirementsSet: [],\n      doctors: []\n    };\n    this.oneRequirement = {\n      cost: 0,\n      id: 0,\n      name: \"\",\n      time: 0\n    };\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n    this.requirementService = requirementService;\n  }\n  ngOnInit() {\n    console.log(this.totalCost);\n    this.getOneDoctor();\n    this.getDoctors();\n    this.getRequirements();\n    this.getAllProfessions();\n  }\n  clickOnSeeMoreButton(doctor) {\n    this.oneDoctor = doctor;\n  }\n  clickOnSearchButton() {\n    this.doctors = [];\n    this.doctors2?.forEach(val => this.doctors.push(Object.assign({}, val)));\n    var n = this.doctors?.length;\n    if (this.doctors != undefined && n != undefined) {\n      for (var i = 0; i < n; i++) {\n        let doc = this.doctors.shift();\n        if (doc != undefined) {\n          for (let prof of doc.professions) {\n            if (this.selectForSearch == prof.name) {\n              this.doctors?.push(doc);\n            }\n          }\n        }\n      }\n    } else console.log(\"error\");\n  }\n  clickOnSchedule(pageName) {\n    if (this.selectProfession != \"\" && this.selectRequirement != \"\") {\n      if (localStorage.getItem(\"totalCost\") == null) localStorage.setItem(\"totalCost\", this.totalCost.toString());else {\n        this.totalCost = Number(localStorage.getItem(\"totalCost\"));\n        localStorage.setItem(\"totalCost\", this.totalCost.toString());\n      }\n      localStorage.setItem(\"Doctor\", this.oneDoctor.id.toString());\n      localStorage.setItem(\"Profession\", this.oneProfession.id.toString());\n      localStorage.setItem(\"Requirement\", this.oneRequirement.id.toString());\n      this.router.navigate([`${pageName}`]);\n    }\n  }\n  clickOnReceipt(cost) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield fsPromises.writeFile(join(__dirname, _this.receiptFile), cost.toString(), {\n          flag: 'w'\n        });\n        const contents = yield fsPromises.readFile(join(__dirname, _this.receiptFile), 'utf-8');\n        console.log(contents);\n        return contents;\n      } catch (err) {\n        console.log(err);\n        return 'Something went wrong';\n      }\n    })();\n  }\n  saveProfession($event) {\n    for (let prof of this.professions) if (prof.name == this.selectProfession) this.oneProfession = prof;\n    this.newRequirements = this.oneProfession.requirementsSet;\n  }\n  saveRequirement($event) {\n    for (let req of this.requirements) if (req.name == this.selectRequirement) this.oneRequirement = req;\n  }\n  getDoctors() {\n    this.doctorService.getDoctors().subscribe(response => {\n      this.doctors = response;\n      this.doctors2 = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n  getRequirements() {\n    this.requirementService.getRequirements().subscribe(response => {\n      this.requirements = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n  getAllProfessions() {\n    this.professionService.getProfession().subscribe(response => {\n      this.professions = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n  getOneDoctor() {\n    this.doctorService.getDoctorById(1).subscribe(response => {\n      this.oneDoctor = response;\n    }, error => {\n      alert(error.message);\n    });\n  }\n};\nDoctorsComponent = __decorate([Component({\n  selector: 'app-doctors',\n  templateUrl: './doctors.component.html',\n  styleUrls: ['./doctors.component.css']\n})], DoctorsComponent);\nexport { DoctorsComponent };","map":{"version":3,"mappings":"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","names":["Component","promises","fsPromises","join","DoctorsComponent","constructor","router","doctorService","professionService","requirementService","id","firstName","lastName","email","phone","password","imageUrl","doctorCode","professions","appointmentsDoctor","name","requirementsSet","doctors","cost","time","ngOnInit","console","log","totalCost","getOneDoctor","getDoctors","getRequirements","getAllProfessions","clickOnSeeMoreButton","doctor","oneDoctor","clickOnSearchButton","doctors2","forEach","val","push","Object","assign","n","length","undefined","i","doc","shift","prof","selectForSearch","clickOnSchedule","pageName","selectProfession","selectRequirement","localStorage","getItem","setItem","toString","Number","oneProfession","oneRequirement","navigate","clickOnReceipt","writeFile","__dirname","receiptFile","flag","contents","readFile","err","saveProfession","$event","newRequirements","saveRequirement","req","requirements","subscribe","response","error","alert","message","getProfession","getDoctorById","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\AN_3\\IS\\Clinica\\clinicaApp\\src\\app\\components\\doctors\\doctors.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {Doctor} from \"../services/doctor\";\nimport {DoctorService} from \"../services/doctor.service\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {ProfessionService} from \"../services/profession.service\";\nimport {Profession} from \"../services/profession\";\nimport {Router} from \"@angular/router\";\nimport {RequirementsService} from \"../services/requirements.service\";\nimport {Requirements} from \"../services/requirements\";\nimport { readFileSync, writeFileSync, promises as fsPromises } from 'fs';\nimport { join } from 'path';\n\n@Component({\n  selector: 'app-doctors',\n  templateUrl: './doctors.component.html',\n  styleUrls: ['./doctors.component.css']\n})\nexport class DoctorsComponent implements OnInit{\n\n  public doctors: Doctor[] = [];\n  public doctors2: Doctor[] = [];\n  public professions: Profession[] = [];\n  public requirements: Requirements[] = [];\n  public newRequirements: Requirements[] = [];\n\n  public totalCost: number = 0;\n  public selectForSearch: string = \"\";\n  public selectProfession: string = \"\";\n  public selectRequirement: string = \"\";\n  public receiptFile: string = \"Receipt\";\n  public oneDoctor: Doctor = {\n    id: 0,\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    imageUrl: \"\",\n    doctorCode: \"\",\n    professions: [],\n    appointmentsDoctor: [],\n  };\n  public oneProfession: Profession = {\n    id: 0,\n    name: \"\",\n    requirementsSet: [],\n    doctors: []\n  }\n  public oneRequirement: Requirements = {\n    cost: 0,\n    id: 0,\n    name: \"\",\n    time: 0\n  }\n\n  constructor(private router: Router,\n              private doctorService: DoctorService,\n              private professionService: ProfessionService,\n              private requirementService: RequirementsService){\n    this.doctorService = doctorService;\n    this.professionService = professionService;\n    this.requirementService = requirementService;\n  }\n\n  ngOnInit(){\n    console.log(this.totalCost);\n    this.getOneDoctor();\n    this.getDoctors();\n    this.getRequirements()\n    this.getAllProfessions();\n  }\n  public clickOnSeeMoreButton(doctor: Doctor): void{\n    this.oneDoctor = doctor;\n  }\n  public clickOnSearchButton():void {\n    this.doctors = [];\n    this.doctors2?.forEach(val => this.doctors.push(Object.assign({}, val)));\n    var n = this.doctors?.length;\n    if(this.doctors != undefined && n!= undefined) {\n      for(var i = 0; i < n; i++){\n        let doc = this.doctors.shift();\n        if(doc != undefined) {\n          for (let prof of doc.professions) {\n            if (this.selectForSearch == prof.name) {\n              this.doctors?.push(doc);\n            }\n          }\n        }\n      }\n    }\n    else\n      console.log(\"error\");\n  }\n  public clickOnSchedule(pageName: string): void {\n      if (this.selectProfession != \"\" && this.selectRequirement != \"\") {\n        if(localStorage.getItem(\"totalCost\") == null)\n          localStorage.setItem(\"totalCost\", this.totalCost.toString());\n        else{\n          this.totalCost = Number(localStorage.getItem(\"totalCost\"));\n          localStorage.setItem(\"totalCost\",this.totalCost.toString());\n        }\n        localStorage.setItem(\"Doctor\", this.oneDoctor.id.toString());\n        localStorage.setItem(\"Profession\", this.oneProfession.id.toString());\n        localStorage.setItem(\"Requirement\", this.oneRequirement.id.toString());\n        this.router.navigate([`${pageName}`]);\n      }\n  }\n  async clickOnReceipt(cost: number){\n    try {\n      await fsPromises.writeFile(join(__dirname, this.receiptFile), cost.toString(), {flag: 'w'});\n\n      const contents = await fsPromises.readFile(\n        join(__dirname, this.receiptFile),'utf-8');\n      console.log(contents);\n\n      return contents;\n    } catch (err) {\n      console.log(err);\n      return 'Something went wrong';\n    }\n  }\n  public saveProfession($event: any): void {\n    for(let prof of this.professions)\n      if ((prof.name) == this.selectProfession)\n        this.oneProfession = prof;\n    this.newRequirements = this.oneProfession.requirementsSet;\n  }\n  public saveRequirement($event: any): void {\n    for(let req of this.requirements)\n      if(req.name == this.selectRequirement)\n        this.oneRequirement = req;\n  }\n\n  public getDoctors(): void {\n    this.doctorService.getDoctors().subscribe(\n      (response: Doctor[]) => {\n        this.doctors = response;\n        this.doctors2 = response;\n        },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n      )\n  }\n  public getRequirements(): void {\n    this.requirementService.getRequirements().subscribe(\n      (response: Requirements[]) => {\n        this.requirements = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n  public getAllProfessions(): void {\n    this.professionService.getProfession().subscribe(\n      (response: Profession[]) => {\n        this.professions = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n  public getOneDoctor(): void {\n    this.doctorService.getDoctorById(1).subscribe(\n      (response: Doctor) => {\n        this.oneDoctor = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}